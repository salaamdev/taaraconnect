name: Taara Internet Monitoring CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11.5'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: taara_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/test.txt
    
    - name: Set up test environment
      run: |
        cp .env.test.example .env.test
        export DATABASE_URL=postgresql://test_user:test_password@localhost:5432/taara_test
        python scripts/setup_test_database.py
    
    - name: Run security checks
      run: |
        bandit -r app/
        safety check
    
    - name: Run code quality checks
      run: |
        black --check app/ tests/
        flake8 app/ tests/
        mypy app/
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/taara_test
        FLASK_ENV: testing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/prod.txt
        python -m compileall app/
    
    - name: Create deployment artifact
      run: |
        tar -czf taara-app-${{ github.sha }}.tar.gz \
          app/ \
          requirements/ \
          deployment/ \
          scripts/ \
          migrations/ \
          config/ \
          run.py \
          README.md
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: taara-app-${{ github.sha }}
        path: taara-app-${{ github.sha }}.tar.gz

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: taara-app-${{ github.sha }}
    
    - name: Set up Ansible
      run: |
        python -m pip install ansible==2.15.0
        ansible-galaxy install -r deployment/ansible/requirements.yml
    
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to staging
      run: |
        cd deployment/ansible
        ansible-playbook -i inventories/staging deploy.yml \
          --extra-vars "app_version=${{ github.sha }}" \
          --extra-vars "database_url=${{ secrets.STAGING_DATABASE_URL }}" \
          --extra-vars "secret_key=${{ secrets.STAGING_SECRET_KEY }}"
      env:
        ANSIBLE_HOST_KEY_CHECKING: False
    
    - name: Run health checks
      run: |
        sleep 30  # Wait for application to start
        curl -f https://staging.taara-monitor.com/health || exit 1
        curl -f https://staging.taara-monitor.com/api/v1/system/health || exit 1
    
    - name: Run smoke tests
      run: |
        pytest tests/smoke/ --staging-url=https://staging.taara-monitor.com

  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: taara-app-${{ github.sha }}
    
    - name: Set up Ansible
      run: |
        python -m pip install ansible==2.15.0
        ansible-galaxy install -r deployment/ansible/requirements.yml
    
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to production (Blue-Green)
      run: |
        cd deployment/ansible
        ansible-playbook -i inventories/production deploy-blue-green.yml \
          --extra-vars "app_version=${{ github.sha }}" \
          --extra-vars "database_url=${{ secrets.PRODUCTION_DATABASE_URL }}" \
          --extra-vars "secret_key=${{ secrets.PRODUCTION_SECRET_KEY }}"
      env:
        ANSIBLE_HOST_KEY_CHECKING: False
    
    - name: Run production health checks
      run: |
        sleep 60  # Wait for application to start
        curl -f https://taara-monitor.com/health || exit 1
        curl -f https://taara-monitor.com/api/v1/system/health || exit 1
    
    - name: Run production smoke tests
      run: |
        pytest tests/smoke/ --production-url=https://taara-monitor.com
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment of ${{ github.sha }} successful"
    
    - name: Rollback on failure
      if: failure()
      run: |
        cd deployment/ansible
        ansible-playbook -i inventories/production rollback.yml
        exit 1
